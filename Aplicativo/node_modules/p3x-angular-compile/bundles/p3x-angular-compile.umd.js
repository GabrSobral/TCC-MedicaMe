(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('p3x-angular-compile', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["p3x-angular-compile"] = {}, global.ng.core, global.ng.common));
})(this, (function (exports, core, common) { 'use strict';

    //import { BrowserModule } from '@angular/platform-browser';
    //let SingletonDefaultModule: NgModule;
    //import cloneDeep from 'lodash/cloneDeep';
    //import { CorifeusMaterialModule } from 'corifeus-web-material';
    function reverse(str) {
        return str.split('').reverse().join('');
    }
    function random() {
        return (Math.floor(Math.random() * (99999999999999999 - 10000000000000000)) + 10000000000000000).toString(16);
    }
    var currentIdTime;
    var currentId = 0;
    function nextId() {
        var now = Date.now();
        if (currentIdTime !== now) {
            currentId = 0;
            currentIdTime = now;
        }
        var comingId = ++currentId;
        var randomHex = reverse(random()).padStart(15, '0');
        var timeHex = reverse(currentIdTime.toString(16).padStart(12, '0'));
        var comingIdHex = reverse(comingId.toString(16).padStart(3, '0'));
        var newId = "p3x-angular-compile-" + timeHex + comingIdHex + randomHex;
        //console.log(newId)
        return newId;
    }
    //const cache : any = {};
    var CompileAttribute = /** @class */ (function () {
        function CompileAttribute(
        //  private container: ViewContainerRef,
        // private service: CompileService
        compiler) {
            this.compiler = compiler;
            this.errorHandler = undefined;
        }
        Object.defineProperty(CompileAttribute.prototype, "renderComponent", {
            /*
            // not requires, since ngOnChanges does it first time change
            ngOnInit() {
                //console.log('ng init')
               // this.update();
            }
             */
            get: function () {
                return typeof this.html === 'string' && this.html.trim() !== '';
            },
            enumerable: false,
            configurable: true
        });
        CompileAttribute.prototype.ngOnChanges = function (changes) {
            //console.log('ng one changes')
            this.update();
        };
        CompileAttribute.prototype.update = function () {
            try {
                if (this.html === undefined || this.html === null || this.html.trim() === '') {
                    //            this.container.clear();
                    this.dynamicComponent = undefined;
                    this.dynamicModule = undefined;
                    return;
                }
                /*

                // looks like Angular already is caching

                //console.log('html', this.html)
                const cacheKey = this.html;
                //console.log(Object.keys(cache).indexOf(cacheKey), cache)
                if (cache.hasOwnProperty(cacheKey)) {
                    const currentCache = cache[cacheKey];
                    this.dynamicComponent = currentCache.dynamicComponent
                    this.dynamicModule = currentCache.dynamicModule
                    return ;
                }
                */
                this.dynamicComponent = this.createNewComponent(this.html, this.context);
                this.dynamicModule = this.compiler.compileModuleSync(this.createComponentModule(this.dynamicComponent));
                /*
                cache[cacheKey] = {
                    dynamicComponent: this.dynamicComponent,
                    dynamicModule: this.dynamicModule,
                };
                */
            }
            catch (e) {
                if (this.errorHandler === undefined) {
                    throw e;
                }
                else {
                    this.errorHandler(e);
                }
            }
            /*
            // now we use it with ngComponentOutlet, since about angular 5
            await this.service.compile({
                template: this.html,
                container: this.container,
                context: this.context,
                imports: this.imports,
                module: this.module
            })
            */
        };
        CompileAttribute.prototype.createComponentModule = function (componentType) {
            var module = {};
            if (this.module !== undefined) {
                module = Object.assign({}, this.module);
            }
            /*
            else if (SingletonDefaultModule !== undefined && SingletonDefaultModule !== null) {
                module = cloneDeep(SingletonDefaultModule);
            }
            */
            module.imports = module.imports || [];
            module.imports.push(common.CommonModule);
            if (this.imports !== undefined) {
                module.imports = module.imports.concat(this.imports);
            }
            if (module.declarations === undefined) {
                module.declarations = [
                    componentType
                ];
            }
            else {
                module.declarations.push(componentType);
            }
            module.entryComponents = [
                componentType
            ];
            var RuntimeComponentModule = /** @class */ (function () {
                function RuntimeComponentModule() {
                }
                return RuntimeComponentModule;
            }());
            RuntimeComponentModule.decorators = [
                { type: core.NgModule, args: [module,] }
            ];
            return RuntimeComponentModule;
        };
        CompileAttribute.prototype.createNewComponent = function (html, context) {
            var selector = nextId();
            var DynamicComponent = /** @class */ (function () {
                function DynamicComponent() {
                    this.context = context;
                }
                return DynamicComponent;
            }());
            DynamicComponent.decorators = [
                { type: core.Component, args: [{
                            selector: selector,
                            template: html
                        },] }
            ];
            return DynamicComponent;
        };
        return CompileAttribute;
    }());
    CompileAttribute.decorators = [
        { type: core.Component, args: [{
                    selector: '[p3x-compile]',
                    template: "\n        <ng-container *ngIf=\"renderComponent\">\n            <ng-container *ngComponentOutlet=\"dynamicComponent; ngModuleFactory: dynamicModule;\"></ng-container>\n        </ng-container>\n    "
                },] },
        { type: core.Injectable }
    ];
    CompileAttribute.ctorParameters = function () { return [
        { type: core.Compiler }
    ]; };
    CompileAttribute.propDecorators = {
        html: [{ type: core.Input, args: ['p3x-compile',] }],
        context: [{ type: core.Input, args: ['p3x-compile-ctx',] }],
        errorHandler: [{ type: core.Input, args: ['p3x-compile-error-handler',] }],
        module: [{ type: core.Input, args: ['p3x-compile-module',] }],
        imports: [{ type: core.Input, args: ['p3x-compile-imports',] }]
    };

    var CompileModule = /** @class */ (function () {
        function CompileModule() {
        }
        return CompileModule;
    }());
    CompileModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        CompileAttribute
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        CompileAttribute
                    ]
                },] }
    ];

    /*
     * Public API Surface of angular-compile
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CompileAttribute = CompileAttribute;
    exports.CompileModule = CompileModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=p3x-angular-compile.umd.js.map
